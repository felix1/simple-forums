<?php namespace App\Domains\Users;

use App\Exceptions\ValidationException;
use CodeIgniter\Entity;
use Config\Services;

/**
 * User Entity
 *
 * Generated by Vulcan at 2017-07-03 22:10:pm
 */
class User extends Entity
{
	protected $id;
	protected $email;
	protected $username;
	protected $avatar;
	protected $password_hash;
	protected $reset_hash;
	protected $activate_hash;
	protected $status;
	protected $status_message;
	protected $active = 0;
	protected $force_pass_reset = 0;
	protected $deleted = 0;
	protected $created_at;
	protected $updated_at;

	protected $_options = [
		/*
		 * Maps names used in sets and gets against unique
		 * names within the class, allowing independence from
		 * database column names.
		 *
		 * Example:
		 *  $datamap = [
		 *      'db_name' => 'class_name'
		 *  ];
		 */
		'datamap' => [],

		/*
		 * Define properties that are automatically converted to Time instances.
		 */
		'dates'   => ['created_at', 'updated_at'],

		/*
		 * Array of field names and the type of value to cast them as
		 * when they are accessed.
		 */
		'casts'   => [
			'active'           => 'boolean',
			'force_pass_reset' => 'boolean',
			'deleted'          => 'boolean',
		],
	];

	/**
	 * @var \App\Domains\Users\Profile
	 */
	public $profile;

	/**
	 * @var \Myth\Auth\Authorize\AuthorizeInterface
	 */
	protected $authorization;

	/**
	 * Validates and normalizes the email address before saving it to the Entity.
	 *
	 * @param string $email
	 *
	 * @return $this
	 * @throws \App\Exceptions\ValidationException
	 */
	public function setEmail(string $email)
	{
		if (! filter_var($email, FILTER_VALIDATE_EMAIL))
		{
			throw new ValidationException(lang('users.invalidEmail'));
		}

		$this->email = strtolower($email);

		return $this;
	}

	/**
	 * Automatically hashes the password when set.
	 *
	 * @see https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence
	 *
	 * @param string $password
	 */
	public function setPassword(string $password)
	{
		$config = config(Auth::class);

		$this->password_hash = password_hash(
			base64_encode(
				hash('sha384', $password, true)
			),
			PASSWORD_DEFAULT,
			['cost' => $config->hashCost]
		);
	}

	/**
	 * Generates a secure hash to use for password reset purposes,
	 * saves it to the instance.
	 *
	 * @return $this
	 * @throws \Exception
	 */
	public function generateResetHash()
	{
		$this->reset_hash = bin2hex(random_bytes(16));
		$this->reset_start_time = date('Y-m-d H:i:s');

		return $this;
	}

	/**
	 * Generates a secure random hash to use for account activation.
	 *
	 * @return $this
	 * @throws \Exception
	 */
	public function generateActivateHash()
	{
		$this->activate_hash = bin2hex(random_bytes(16));

		return $this;
	}

	/**
	 * Provides a link to the user's avatar, or a Gravatar
	 */
	public function avatar(int $size=60)
	{
		if (! empty($this->avatar)) return $this->avatar;

		$hash = md5(strtolower(trim($this->email)));

		return "https://www.gravatar.com/avatar/{$hash}?s={$size}";
	}

	/**
	 * Generates a link to the user's profile page.
	 *
	 * @return \CodeIgniter\Router\string|string
	 */
	public function link()
	{
		$slug = $this->id.'-'.url_title($this->username, '-', true);

		return route_to('userProfile', $slug);
	}


	//--------------------------------------------------------------------
	// Banning Users
	//--------------------------------------------------------------------

	/**
	 * Bans a user.
	 *
	 * @param string $reason
	 *
	 * @return $this
	 */
	public function ban(string $reason)
	{
		$this->status = 'banned';
		$this->status_message = $reason;

		return $this;
	}

	/**
	 * Removes a ban from a user.
	 *
	 * @return $this
	 */
	public function unBan()
	{
		$this->status = $this->status_message = '';

		return $this;
	}

	/**
	 * Checks to see if a user has been banned.
	 *
	 * @return bool
	 */
	public function isBanned(): bool
	{
		return $this->status === 'banned';
	}

	//--------------------------------------------------------------------
	// Authorization Helpers
	//--------------------------------------------------------------------

	/**
	 * Is the user an Administrator?
	 *
	 * @return bool
	 */
	public function isAdmin(): bool
	{
		return $this->auth()->inGroup('admins', $this->id);
	}

	/**
	 * Is the user a Moderator?
	 *
	 * @return bool
	 */
	public function isModerator()
	{
		return $this->auth()->inGroup('moderators', $this->id);
	}

	/**
	 * Arbitrary check whether user is in one or more groups.
	 *
	 * @param string|array $group
	 *
	 * @return bool
	 */
	public function inGroup($group)
	{
		return $this->auth()->inGroup($group, $this->id);
	}

	/**
	 * Adds a user to the specified group.
	 *
	 * @param string $groupName
	 *
	 * @return bool
	 */
	public function addToGroup(string $groupName)
	{
		return $this->auth()->addUserToGroup($this->id, $groupName);
	}

	/**
	 * Removes the user from the specified group.
	 *
	 * @param string $groupName
	 *
	 * @return mixed
	 */
	public function removeFromGroup(string $groupName)
	{
		return $this->auth()->removeUserFromGroup($this->id, $groupName);
	}

	/**
	 * Checks if the user has the specified permission.
	 *
	 * @param string $permission
	 *
	 * @return bool
	 */
	public function hasPermission(string $permission): bool
	{
		return $this->auth()->hasPermission($permission, $this->id);
	}

	/**
	 * Adds a single permission to this user only.
	 *
	 * @param string $permission
	 *
	 * @return bool|int
	 */
	public function addPermission(string $permission)
	{
		return $this->auth()->addPermissionToUser($permission, $this->id);
	}

	/**
	 * Removes the permission from this user, but not from the groups they're in.
	 *
	 * @param string $permission
	 *
	 * @return bool|null
	 */
	public function removePermission(string $permission)
	{
		return $this->auth()->removePermissionFromUser($permission, $this->id);
	}

	/**
	 * Returns the user's permissions, automatically
	 * json_decoding them into an associative array.
	 *
	 * @return array|mixed
	 */
	public function getPermissions()
	{
		return ! empty($this->permissions)
			? json_decode($this->permissions, true)
			: [];
	}

	/**
	 * Stores the permissions, automatically json_encoding
	 * them for saving.
	 *
	 * @param array $permissions
	 *
	 * @return $this
	 */
	public function setPermissions(array $permissions)
	{
		$this->permissions = json_encode($permissions);

		return $this;
	}

	/**
	 * Loads the authorization file, if not already loaded.
	 */
	protected function auth()
	{
		if (is_null($this->authorization))
		{
			$this->authorization = Services::authorization();
		}

		return $this->authorization;
	}
}
